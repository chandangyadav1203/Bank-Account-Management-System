#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_ACCOUNTS 100
#define MAX_NAME_LENGTH 50
#define MAX_TRANSACTION_HISTORY 50
#define FILENAME "bank_accounts.dat"

typedef struct {
    int account_number;
    char name[MAX_NAME_LENGTH];
    float balance;
    char transactions[MAX_TRANSACTION_HISTORY][100];
    int transaction_count;
} BankAccount;

void print_menu();
void create_account();
void deposit_money();
void withdraw_money();
void view_balance();
void view_transactions();
void save_data();
void load_data();
int find_account(int account_number);
void add_transaction(int account_number, const char *transaction);
void clear_input_buffer();

BankAccount accounts[MAX_ACCOUNTS];
int total_accounts = 0;

int main() {
    load_data();

    int choice;
    while (1) {
        print_menu();
        printf("Enter your choice: ");
        scanf("%d", &choice);
        clear_input_buffer();

        switch (choice) {
            case 1:
                create_account();
                break;
            case 2:
                deposit_money();
                break;
            case 3:
                withdraw_money();
                break;
            case 4:
                view_balance();
                break;
            case 5:
                view_transactions();
                break;
            case 6:
                save_data();
                printf("Data saved successfully.\n");
                break;
            case 7:
                printf("Exiting program...\n");
                save_data();
                exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }
    return 0;
}

void print_menu() {
    printf("\n---- Bank Account Management System ----\n");
    printf("1. Create Account\n");
    printf("2. Deposit Money\n");
    printf("3. Withdraw Money\n");
    printf("4. View Balance\n");
    printf("5. View Transactions\n");
    printf("6. Save Data\n");
    printf("7. Exit\n");
}

void create_account() {
    if (total_accounts >= MAX_ACCOUNTS) {
        printf("Account limit reached. Cannot create more accounts.\n");
        return;
    }

    BankAccount new_account;
    new_account.account_number = total_accounts + 1;
    new_account.balance = 0;
    new_account.transaction_count = 0;

    printf("Enter account holder name: ");
    fgets(new_account.name, MAX_NAME_LENGTH, stdin);
    new_account.name[strcspn(new_account.name, "\n")] = '\0'; // Remove newline character

    accounts[total_accounts] = new_account;
    total_accounts++;

    printf("Account created successfully! Account Number: %d\n", new_account.account_number);
}

void deposit_money() {
    int account_number;
    float amount;

    printf("Enter account number: ");
    scanf("%d", &account_number);
    clear_input_buffer();

    int index = find_account(account_number);
    if (index == -1) {
        printf("Account number not found.\n");
        return;
    }

    printf("Enter deposit amount: ");
    scanf("%f", &amount);
    clear_input_buffer();

    if (amount <= 0) {
        printf("Deposit amount must be greater than 0.\n");
        return;
    }

    accounts[index].balance += amount;
    add_transaction(account_number, "Deposit of $%.2f", amount);
    printf("Deposited $%.2f successfully.\n", amount);
}

void withdraw_money() {
    int account_number;
    float amount;

    printf("Enter account number: ");
    scanf("%d", &account_number);
    clear_input_buffer();

    int index = find_account(account_number);
    if (index == -1) {
        printf("Account number not found.\n");
        return;
    }

    printf("Enter withdrawal amount: ");
    scanf("%f", &amount);
    clear_input_buffer();

    if (amount <= 0) {
        printf("Withdrawal amount must be greater than 0.\n");
        return;
    }

    if (accounts[index].balance < amount) {
        printf("Insufficient balance.\n");
        return;
    }

    accounts[index].balance -= amount;
    add_transaction(account_number, "Withdrawal of $%.2f", amount);
    printf("Withdrawn $%.2f successfully.\n", amount);
}

void view_balance() {
    int account_number;

    printf("Enter account number: ");
    scanf("%d", &account_number);
    clear_input_buffer();

    int index = find_account(account_number);
    if (index == -1) {
        printf("Account number not found.\n");
        return;
    }

    printf("Account Number: %d\n", accounts[index].account_number);
    printf("Account Holder: %s\n", accounts[index].name);
    printf("Balance: $%.2f\n", accounts[index].balance);
}

void view_transactions() {
    int account_number;

    printf("Enter account number: ");
    scanf("%d", &account_number);
    clear_input_buffer();

    int index = find_account(account_number);
    if (index == -1) {
        printf("Account number not found.\n");
        return;
    }

    printf("Transactions for Account Number: %d\n", account_number);
    for (int i = 0; i < accounts[index].transaction_count; i++) {
        printf("%s\n", accounts[index].transactions[i]);
    }
}

void save_data() {
    FILE *file = fopen(FILENAME, "wb");
    if (!file) {
        printf("Error saving data.\n");
        return;
    }

    fwrite(&total_accounts, sizeof(int), 1, file);
    fwrite(accounts, sizeof(BankAccount), total_accounts, file);

    fclose(file);
}

void load_data() {
    FILE *file = fopen(FILENAME, "rb");
    if (!file) {
        printf("No previous data found, starting fresh.\n");
        return;
    }

    fread(&total_accounts, sizeof(int), 1, file);
    fread(accounts, sizeof(BankAccount), total_accounts, file);

    fclose(file);
}

int find_account(int account_number) {
    for (int i = 0; i < total_accounts; i++) {
        if (accounts[i].account_number == account_number) {
            return i;
        }
    }
    return -1; // Account not found
}

void add_transaction(int account_number, const char *transaction, float amount) {
    int index = find_account(account_number);
    if (index == -1) {
        printf("Account not found for transaction.\n");
        return;
    }

    if (accounts[index].transaction_count < MAX_TRANSACTION_HISTORY) {
        snprintf(accounts[index].transactions[accounts[index].transaction_count],
                 100, transaction, amount);
        accounts[index].transaction_count++;
    } else {
        printf("Transaction history is full.\n");
    }
}

void clear_input_buffer() {
    while (getchar() != '\n');
}
